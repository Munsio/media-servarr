# Default library values
nameOverride: ''
fullnameOverride: ''

#
# Secrets to create
#
secrets: []
  # - name: 'apiKey'
  #   value: 'e71e2f1da39e4918ba0a9c5355166268'

#
# Application Config
# Here you can define configuration to be used and mounted as a ConfigMap
#
application:
  config:
    # Filename of configuration
    filename: 'config.xml'
    # Configuration file contents
    contents: |
      <Config>
        <Port>7878</Port>
        <UrlBase>dashboard</UrlBase>
        <ApiKey>$apiKey</ApiKey>
      </Config>
    # Secrets to inject. In the config they must be defined as $secretname
    secrets: [ 'apiKey' ]
    # Path to mount the file to in the application
    mountPath: '/config/config.xml'

#
# Resource - DEPLOYMENT
# This is to set up and define the application deployment
#
deployment:
  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  container:
    image:
      repository: 'nginx'
      tag: 'latest'
      pullPolicy: 'IfNotPresent'

    ports:
      - name: 'http'
        containerPort: 80
        protocol: 'TCP'

    livenessProbe:
      httpGet:
        path: '/'
        port: 'http'
      initialDelaySeconds: 30
    readinessProbe:
      httpGet:
        path: '/'
        port: 'http'
      initialDelaySeconds: 15

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
      - name: 'foo'
        mountPath: "/etc/foo"
        readOnly: true

  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  nodeSelector: {}

  tolerations: []

  affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: 'name'

service:
  type: 'ClusterIP'
  ports:
    - port: 80
      targetPort: 'http'
      protocol: 'TCP'
      name: 'http'

ingress:
  enabled: false
  className: ''
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ''
      paths:
        - path: '/'
          pathType: 'ImplementationSpecific'
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

